module abc{
		type charstring	Char19 	length(19) ;
	type charstring	Char17 	length(17) ;
	
	    type port MyPortTypeAsync message {
	inout all
    }  
	    type component MyTestComponentAsync {
	timer myTimer := 5 ;
	port MyPortTypeAsync PCO1,PCO2,PO
    }
	type record asyncsendtype{
		Char19  sendmessage
	}
	
	type record asyncreceivetype{
		Char17  receivemessage
	}

    template asyncsendtype asyncSendMessage := 
    {
	    	sendmessage:="Hello. How are you?"
    }

    template asyncreceivetype asyncReceiveMessage := 
    {
	    receivemessage:="Thank you fine.!!"
    }

    // Test System component declaration
    type component SystemComponent {
	port MyPortTypeAsync port1,port2,port3
    }
	testcase testcase1() runs on MyTestComponentAsync   system SystemComponent{
		var float T0;
		var float T2;
		var float T3;
		var float T4;
		var float T1;	//define global clock
		var float d1;
		var float d2;
		var float d3;
		var float d4;
		var float d5;	//time interval

		//mapping PCO to system's interface
		map(mtc: PCO1, system: port1);
		map(mtc: PCO2, system: port2);
		map(mtc: PO, system: port3);
		
		T0 := self.now;
		T1 := T0 + 1;
		resume(T1);		//wait until T1 point
		PCO1.send(asyncSendMessage);
		
		alt {		//alt 1
			[]PO.receive(asyncReceiveMessage) {
				T2 := self.now;
				d1 := T2 - T1;
				if(d1 < 2) {
					
					alt {		//alt 2
						
						[]PO.receive(asyncReceiveMessage) {
							T3 := self.now;
							d2 := T3 - T2;
							d4 :=d1+d2;
							if (d2 > 1 and d2 < 3 and d4 < 2) {	//node (1)
								
								alt {
									[]PCO2.receive(asyncReceiveMessage) 
									{
										T4 := self.now;
										d3 := T4 - T3;
										d4 :=d1 + d2 + d3;
										if( d4 > 2 and d4 < 3 ){ //node (7)
											setverdict(pass);
										} else {		//node (8)
											setverdict(fail);
										}
									}
									[]PCO2.receive {		//node (9)
										setverdict(fail);
									}			
								}
							} else if (d2 > 1 and d2 < 3 and d4 >= 2){	 //node (2)
								alt {
									[]PCO2.receive(asyncReceiveMessage) {
										T4 := self.now;
										d3 := T4 - T3;
										if(d3 < 1) {	//node (10)
											setverdict(pass);
										} else {		//node (11)
											setverdict(fail);
										}
									}
									[]PCO2.receive {		//node (12)
										setverdict(fail);
									}
								}						
							} else {		//node (4): d2 <= 1 or d2 >= 3
								setverdict(fail);	//non-functional fail
							}
						}
						[]PO.receive(asyncReceiveMessage) {
							T3 := self.now;
							d2 := T3 - T2;
							
							if(d2 < 3) {	//node (3)
								
								alt {
									[] PCO2.receive(asyncReceiveMessage) {
										
										T4 := self.now;
										d3 := T4 - T3;
										
										if(d3 < 1) {	//node (13)
											setverdict(pass);
										} else {		//node (14)
											setverdict(fail);
										}
									}
									[] PCO2.receive {
										setverdict(fail);
									}
								}
							} else {		//node (5)
								setverdict(fail); 
							}
						}
						[]PO.receive {		//node (6)
							setverdict(fail);
						}
					}	//end of alt 2
				} else {
					setverdict(fail);	//non-functional fail				
				}
			}
			[]PO.receive {
				setverdict(fail);
			}
		}	//end of alt 1
		
	}	//end of test case
}	//end of module

