module UPDATE_ERROR_0
{
		group BGP_CONSTANT
		{
			const Oct2 AS_Number		:= '0046'O;		//70
			const Oct4 MY_IPv4		:= 'C0A801C3'O;		//192.168.1.195
			const Oct2 AS_Number_I	:= '0001'O;
			const Oct4 ROUTER_IPv4	:= 'C0A801A5'O;		//192.168.1.165
			const Oct4 AUX_IP			:= 'B2010102'O;		//178.1.1.2
			const integer HOLD_TIMER 	:= 190;
			const Oct2 TimeToWait 		:= '0000'O; 
			const Oct2 ROUTER_AS 	:= '0001'O;		//1
		}//end group BGP_CONSTANT
		
		// Common string subtypes  number indicates encoding length in number of 
		// _hex digits/chars/octets_
		type octetstring	Oct1 		length(1);
		type octetstring	Oct2 		length(2); 
		type octetstring	Oct3 		length(3); 
		type octetstring	Oct4 		length(4); 
		type octetstring	Oct6 		length(6); 
		type octetstring	Oct16 		length(16); 
		type octetstring	Oct128 		length(128); 
		//type octetstring	Oct1to128 	length(1..128); //with {encode "1 to 128 Octets"};
			
		group	PDU_TYPE
		{
			group	PDU_OPEN
			{
				type record BGP_OPEN
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	VERSION,
					Oct2	MY_AS,
					Oct2	HOLDTIME,
					Oct4	ID,
					Oct1	OPTION_LEN			
				}//end record BGP_OPEN	
			}//end group PDU_OPEN
			
			group	PDU_NOTIFICATION
			{
				type	record	BGP_NOTIFICATION
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	ERR_CODE,
					Oct1	ERR_SUBCODE
				}// end record BGP_NOTIFICATION	
			}// end group	PDU_NOTIFICATION
			
			group PDU_KEEPALIVE
			{
				type record BGP_KEEPALIVE
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE
				}//	end record BGP_KEEPALIVE				
			}// end group PDU_KEEPALIVE
			
			group	PDU_UPDATE
			{
				type	record	BGP_UPDATE_CAST
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	MED,
					Oct4	MED_VAL,
					Oct4	NLRI
				}// end record BGP_UPDATE_CAST
				
				type	record	BGP_UPDATE_MIN
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN
				}// end record BGP_UPDATE_MIN
				
				type	record	BGP_UPDATE_ERR
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct4	NLRI						
				}// end record BGP_UPDATE_ERR
				
				type	record	BGP_UPDATE_MED
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	MED,
					Oct4	MED_VAL,
					Oct4	NLRI
				}//end record BGP_UPDATE_MED
				
				type	record	BGP_UPDATE_LOCAL_PREF
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	LOCAL_PREF,
					Oct4	LOCAL_PREF_VAL,
					Oct4	NLRI
				}//end record BGP_UPDATE_LOCAL_PREF
				
				type	record	BGP_UPDATE_ATOMIC
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	ATOMIC_AGGREGATE,
					Oct4	NLRI
				}//end record BGP_UPDATE_AUTOMIC
				
				type	record	BGP_UPDATE_AGGREGATE
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	AGGREGATION,
					Oct2	AGGRE_AS,
					Oct4	AGGRE_IP,
					Oct4	NLRI
				}// end record BGP_UPDATE_AGGREGATE
			}//end group PDU_UPADATE
			
		}//end group PDU_TYPE
		
		
		group	TEMPL_OPEN
		{
			template	BGP_OPEN	OPEN_RECEIVE :=
			{
				MARKER 			:= ?,
				LENGTH 			:= ?,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= ?,
				HOLDTIME		:= ?,
				ID			:= ?,
				OPTION_LEN		:= ?
			};
			
			template	BGP_OPEN	OPEN_SEND :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= AS_Number,
				HOLDTIME		:= '00B4'O,	//180
				ID			:= MY_IPv4,
				OPTION_LEN		:= '00'O
			};
		}//end group	TEMPL_OPEN
		
		group	TEMPL_NOTIFICATION
		{
			template	BGP_NOTIFICATION		NOTIFICATION_RECEIVE :=
			{
				MARKER			:= ?,
				LENGTH			:= ?,
				TYPE			:= '03'O,
				ERR_CODE		:= ?,
				ERR_SUBCODE	:= ?
			};
			
			template	BGP_NOTIFICATION	CEASE :=
			{
				MARKER			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH			:= '0015'O,
				TYPE			:= '03'O,
				ERR_CODE		:= '06'O,
				ERR_SUBCODE	:= '00'O
			};
			
		}//end group TEMPL_NOTIFICATION
		
		group	TEMPL_KEEPALIVE
		{
			template	BGP_KEEPALIVE		KEEPALIVE_SEND :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '0013'O,		//19
				TYPE			:= '04'O
			};
			
			template	BGP_KEEPALIVE		KEEPALIVE_RECEIVE :=
			{
				MARKER	:= ?,
				LENGTH	:= ?,
				TYPE	:= '04'O
			};
		}//end group TEMPL_KEEPALIVE
		
		group	TEMPL_UPDATE
		{
			template	BGP_UPDATE_CAST		UPDATE_CAST :=
			{
				MARKER						:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH						:= ?,
				TYPE							:= '02'O,
				UNFEASIBLE				:= '0000'O,
				PATHATTRIBUTE_LEN	:= ?,
				ORIGIN						:= '400101'O,
				ORIGIN_TYPE				:= '00'O,
				AS_PATH						:= '4002'O,
				AS_LEN						:= '04'O,
				AS_SEG_TYPE				:= '02'O,
				AS_SEG_LEN				:= '01'O,
				AS_SEG_VAL				:= '0001'O,
				NEXT_HOP					:= '400304'O,
				NEXT_HOT_VAL			:= ROUTER_IPv4,
				MED								:= '800404'O,
				MED_VAL						:= ?,
				NLRI							:= ?
			};			
				
			template	BGP_UPDATE_MIN		UPDATE_LEN_MAX_0 :=
			{
				MARKER						:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH						:= '0017'O,
				TYPE							:= '02'O,	
				UNFEASIBLE				:= '1001'O,
				PATHATTRIBUTE_LEN	:= '0000'O
			};
			
			template	BGP_UPDATE_MIN		UPDATE_LEN_MAX_1 :=
			{
				MARKER						:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH						:= '0017'O,
				TYPE							:= '02'O,	
				UNFEASIBLE				:= '0000'O,
				PATHATTRIBUTE_LEN	:= '1001'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_FLAG_ERROR_0 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '800101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_FLAG_ERROR_1 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '0002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_FLAG_ERROR_2 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '600304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_MED		UPDATE_ATTR_FLAG_ERROR_3 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0034'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0019'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				MED									:= '400404'O,
				MED_VAL							:= '00000077'O,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_LOCAL_PREF		UPDATE_ATTR_FLAG_ERROR_4 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0034'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0019'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				LOCAL_PREF					:= 'A00504'O,
				LOCAL_PREF_VAL			:= '00000077'O,
				NLRI								:= '14A66F80'O
			};	
			
			template	BGP_UPDATE_ATOMIC		UPDATE_ATTR_FLAG_ERROR_5 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0030'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0015'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				ATOMIC_AGGREGATE		:= 'E00600'O,
				NLRI								:= '14A66F80'O
			};	
			
			template	BGP_UPDATE_AGGREGATE		UPDATE_ATTR_FLAG_ERROR_6 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0036'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '001B'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				AGGREGATION					:= '600706'O,
				AGGRE_AS						:= AS_Number,
				AGGRE_IP						:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_LEN_ERROR_0 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400100'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_LEN_ERROR_1 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '05'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_ATTR_LEN_ERROR_2 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400303'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_MED		UPDATE_ATTR_LEN_ERROR_3 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0034'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0019'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				MED									:= '800402'O,
				MED_VAL							:= '00000077'O,
				NLRI								:= '14A66F80'O
			};
			
			template	BGP_UPDATE_LOCAL_PREF		UPDATE_ATTR_LEN_ERROR_4 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0034'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0019'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				LOCAL_PREF					:= '400506'O,
				LOCAL_PREF_VAL			:= '00000077'O,
				NLRI								:= '14A66F80'O
			};	
			
			template	BGP_UPDATE_ATOMIC		UPDATE_ATTR_LEN_ERROR_5 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0030'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0015'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				ATOMIC_AGGREGATE		:= '400600'O,
				NLRI								:= '14A66F80'O
			};	
			
			template	BGP_UPDATE_AGGREGATE		UPDATE_ATTR_LEN_ERROR_6 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0036'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '001B'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MY_IPv4,
				AGGREGATION					:= 'C00706'O,
				AGGRE_AS						:= AS_Number,
				AGGRE_IP						:= MY_IPv4,
				NLRI								:= '14A66F80'O
			};
		}//end group TEMPL_UPADATE
		
		
		group	Port
		{
			type port	BGP_Port	message
			{
				inout	all;
			}		
		}//end group Port
		
		group	TestAbstractComponent
		{
			type component	BGP_Component
			{
				port		BGP_Port		BGPP;
				timer	BGP_Timer_Hold 		:= 190;
				timer	BGP_Timer_KeepAlive 	:= 60; //unit-s
				timer	Timer_Keepalive_Nego	 := 25;
			
			}
		}	//end group TestAbstractComponent
		
		group	TestSystemInterface
		{
			type component BGP_Interface
			{
				port 	BGP_Port		BGP_Interface_Port; 
			}
		}//end group TestSystemInterface
				
		function	fun_ESTABLISHED() runs on BGP_Component
		{
			BGPP.send(OPEN_SEND);
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{					
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive keepalive frame
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							BGPP.send(KEEPALIVE_SEND);
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}
						[]BGPP.receive	
						{
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{
					setverdict(fail);
					stop;
				}	
			}//end alt 01
		}// end function	fun_ESTABLISHED()
		
		
		/*Update frame errors*/
		testcase	BGP_UPDATE_LEN_MAX_0()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
						
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_LEN_MAX_0);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='01'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_LEN_MAX_0()
		
		testcase	BGP_UPDATE_LEN_MAX_1()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_LEN_MAX_1);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='01'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_LEN_MAX_1()
		
		testcase	BGP_UPDATE_ATTR_FLAG_0()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_0);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_0()
		
		testcase	BGP_UPDATE_ATTR_FLAG_1()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_1);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_1()
		
		testcase	BGP_UPDATE_ATTR_FLAG_2()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_2);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_2()
		
		testcase	BGP_UPDATE_ATTR_FLAG_3()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_3);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_3()
		
		testcase	BGP_UPDATE_ATTR_FLAG_4()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_4);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_4()
		
		testcase	BGP_UPDATE_ATTR_FLAG_5()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_5);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_5()
		
		testcase	BGP_UPDATE_ATTR_FLAG_6()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_FLAG_ERROR_6);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_FLAG_6()
		
		testcase	BGP_UPDATE_ATTR_LEN_0()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION	vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_0);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_0()
		
		testcase	BGP_UPDATE_ATTR_LEN_1()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_1);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_1()
		
		testcase	BGP_UPDATE_ATTR_LEN_2()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_2);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_2()
		
		testcase	BGP_UPDATE_ATTR_LEN_3()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_3);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_3()
		
		testcase	BGP_UPDATE_ATTR_LEN_4()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_4);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_4()
		
		testcase	BGP_UPDATE_ATTR_LEN_5()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_5);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_5()
		
		testcase	BGP_UPDATE_ATTR_LEN_6()	runs on BGP_Component system BGP_Interface
		{
			var	integer	KeepTimerValue := 60;
			var 	integer	HoldTimerValue := 190;
			
			var	Oct1		ErrorCode 	:= '00'O;
			var	Oct1		ErrorSubCode := '00'O;
			
			var 	BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			fun_ESTABLISHED();
			
			BGP_Timer_KeepAlive.start;
			alt	//01
			{//wait for receive keepalive frame
				[]BGPP.receive(KEEPALIVE_RECEIVE)
				{
					BGPP.send(UPDATE_ATTR_LEN_ERROR_6);
					HoldTimerValue := HOLD_TIMER;
					BGP_Timer_Hold.start(HoldTimerValue);
					label	L1;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='03'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGPP.receive(KEEPALIVE_RECEIVE)
						{
							HoldTimerValue := HoldTimerValue - KeepTimerValue;
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGPP.receive(UPDATE_CAST)
						{
							BGP_Timer_Hold.start(HoldTimerValue);
							goto	L1;
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_UPDATE_ATTR_LEN_6()
		
}//end module UPDATE_ERROR_0
