module ROUTING_SELECTION_class_example
{
		// Common string subtypes  number indicates encoding length in number of 
		// _hex digits/chars/octets_
		type octetstring	Oct1 		length(1);
		type octetstring	Oct2 		length(2); 
		type octetstring	Oct3 		length(3); 
		type octetstring	Oct4 		length(4); 
		type octetstring	Oct6 		length(6);
		type octetstring	Oct8 		length(8); 
		type octetstring	Oct16 		length(16); 
		type octetstring	Oct128 		length(128); 
		type octetstring	Oct45 		length(45); 
		//type octetstring	Oct1to128 	length(1..128); //with {encode "1 to 128 Octets"};
		
		//group	Module_Par
		//{
			//modulepar	{Oct4	MTC_IPv4 };
			//modulepar	{Oct4	ROUTER_PCO1_IPv4 };
			//modulepar	{Oct4	PTC1_IPv4 };
			//modulepar	{Oct4	ROUTER_PCO2_IPv4 };
		//}//end Module_Par*/
		group BGP_CONSTANT
		{
			const Oct2 	AS_Number_MTC	:= '0046'O;		//70
			const Oct2 	AS_Number_PTC1	:= '0050'O;		//80
			const Oct2 	AS_Number_PTC2	:= '0050'O;		//80
			const Oct2 	AS_Number_ROUTER 	:= '0001'O;	
			
			const Oct4 	MTC_IPv4		:= 'CA65010B'O;	//202.101.1.11
			const Oct4	PTC1_IPv4		:= 'CA650316'O;	//202.101.3.22
			const Oct4	PTC2_IPv4		:= '79650521'O;	//121.101.5.33
			const Oct4 	ROUTER_PCO1_IPv4 := 'CA650101'O;	//202.101.1.1
			const Oct4	ROUTER_PCO2_IPv4 := 'CA650301'O;	//202.101.3.1
			const Oct4	ROUTER_PCO3_IPv4 := '79650501'O;	//121.101.5.1
			
			const integer HOLD_TIMER 	:= 190;			//unit-s
			
			const Oct4	AS_Number_ROUTER_MTC := '00010046'O;
			const Oct4	AS_Number_ROUTER_PTC1 := '00010050'O;
			const Oct6	AS_Number_ROUTER_MTC_02 := '000100460002'O;
			const Oct6	AS_Number_ROUTER_PTC1_02 := '000100500002'O;
						
			const Oct16	MY_IPv6		:= '3FFE3211000A00010000000000000002'O;	//3FFE:3211:A:1::2
			const Oct8	MY_IPv6_PREFIX	:= '3FFE3211000B0002'O;	//3FFE:3211:B:2/64
			const Oct16	ROUTER_IPv6	:= '3FFE3211000A00020000000000000001'O;	//3FFE:3211:A:2::1
		}//end group BGP_CONSTANT
		
		group	PDU_TYPE
		{
			group	PDU_OPEN
			{
				type record BGP_OPEN
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	VERSION,
					Oct2	MY_AS,
					Oct2	HOLDTIME,
					Oct4	ID,
					Oct1	OPTION_LEN			
				}//end record BGP_OPEN
				
				type record BGP_OPEN_TEMP
				{
					Oct16	MARKER,
					Oct2		LENGTH,
					Oct1		TYPE,
					Oct1		VERSION,
					Oct2		MY_AS,
					Oct2		HOLDTIME,
					Oct4		ID,
					Oct1		OPTION_LEN,
					Oct16	TEMP
				}//end record BGP_OPEN_TEMP
			}//end group PDU_OPEN
			
			group	PDU_NOTIFICATION
			{
				type	record	BGP_NOTIFICATION
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	ERR_CODE,
					Oct1	ERR_SUBCODE
				}// end record BGP_NOTIFICATION	
			}// end group	PDU_NOTIFICATION
			
			group PDU_KEEPALIVE
			{
				type record BGP_KEEPALIVE
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE
				}//	end record BGP_KEEPALIVE				
			}// end group PDU_KEEPALIVE
			
			group	PDU_AUX
			{			
				type record	FOR_AUX
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	BS_ID,
					Oct2	LENG,
					Oct2	TTW,
					Oct2	COMMAND,
					Oct2	LIST_NUM
				}//end record	FOR_AUX
				
				type record	FOR_AUX_CLOSE
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	BS_ID,
					Oct2	LENG,
					Oct2	TTW,
					Oct2	COMMAND
				}//end record	FOR_AUX_CLOSE
				
				type record	FOR_CONF
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	CONF_NO
				}//end record	FOR_CONF
				
			}// end group	PDU_AUX
			
			group	PDU_UPDATE
			{
				type	record	BGP_UPDATE_CAST
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct3	MED,
					Oct4	MED_VAL,
					Oct4	NLRI
				}// end record BGP_UPDATE_CAST
				
				type	record	BGP_UPDATE_ORIGIN_AS_N
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct4	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct4	NLRI
				}// end record BGP_UPDATE_ORIGIN_AS_N
				
				type	record	BGP_UPDATE_3AS_PATH
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct6	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct4	NLRI
				}// end record BGP_UPDATE_3AS_PATH	
				
				type	record	BGP_UPDATE_NLRI
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,	
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct4	NLRI,
					Oct4	NLRI2
				}// end record BGP_UPDATE_NLRI
				
				type	record	BGP_UPDATE_WITHDRAW
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	UNFEASIBLE,
					Oct4	WITHDRAWN,
					Oct2	PATHATTRIBUTE_LEN	
				}// end record BGP_UPDATE_WITHDRAW
				
				type	record	BGP_UPDATE_ERR
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct2	UNFEASIBLE,
					Oct2	PATHATTRIBUTE_LEN,
					Oct3	ORIGIN,
					Oct1	ORIGIN_TYPE,
					Oct2	AS_PATH,
					Oct1	AS_LEN,
					Oct1	AS_SEG_TYPE,
					Oct1	AS_SEG_LEN,
					Oct2	AS_SEG_VAL,
					Oct3	NEXT_HOP,
					Oct4	NEXT_HOT_VAL,
					Oct4	NLRI							
				}// end record BGP_UPDATE_ERR
				
			}//end group PDU_UPADATE
			
			type record		BGP_CM
			{
				Oct2		DATA
			}
			
		}//end group PDU_TYPE
		
		
		group	TEMPL_OPEN
		{
			template	BGP_OPEN	OPEN_RECEIVE :=
			{
				MARKER 			:= ?,
				LENGTH 			:= ?,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= ?,
				HOLDTIME		:= ?,
				ID			:= ?,
				OPTION_LEN		:= ?
			};
			
			template	BGP_OPEN	OPEN_SEND :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= AS_Number_MTC,
				HOLDTIME		:= '00B4'O,	//180
				ID			:= MTC_IPv4,
				OPTION_LEN		:= '00'O
			};
								
			template	BGP_OPEN	OPEN_SEND_PTC1 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number_PTC1,
				HOLDTIME		:= '00B4'O,	//180
				ID					:= PTC1_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_SEND_PTC2 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number_PTC2,
				HOLDTIME		:= '00B4'O,	//180
				ID					:= PTC2_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN_TEMP		OPEN_SEND_TEMP :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= AS_Number_MTC,
				HOLDTIME		:= '00B4'O,	//180
				ID				:= MTC_IPv4,
				OPTION_LEN		:= '10'O,
				TEMP			:= '02060104000200010202800002020200'O
			};
			
			template	BGP_OPEN_TEMP		OPEN_SEND1_TEMP :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE			:= '01'O,
				VERSION			:= '04'O,
				MY_AS			:= AS_Number_PTC1,
				HOLDTIME		:= '00B4'O,	//180
				ID				:= PTC1_IPv4,
				OPTION_LEN		:= '10'O,
				TEMP			:= '02060104000200010202800002020200'O
			};
		}//end group	TEMPL_OPEN
		
		group	TEMPL_NOTIFICATION
		{
			template	BGP_NOTIFICATION		NOTIFICATION_RECEIVE :=
			{
				MARKER			:= ?,
				LENGTH			:= ?,
				TYPE			:= '03'O,
				ERR_CODE		:= ?,
				ERR_SUBCODE	:= ?
			};
			
			template	BGP_NOTIFICATION	CEASE :=
			{
				MARKER			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH			:= '0015'O,
				TYPE			:= '03'O,
				ERR_CODE		:= '06'O,
				ERR_SUBCODE	:= '00'O
			};
			
		}//end group TEMPL_NOTIFICATION
		
		group	TEMPL_KEEPALIVE
		{
			template	BGP_KEEPALIVE		KEEPALIVE_SEND :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '0013'O,		//19
				TYPE			:= '04'O
			};
			
			template	BGP_KEEPALIVE		KEEPALIVE_RECEIVE :=
			{
				MARKER	:= ?,
				LENGTH	:= ?,
				TYPE	:= '04'O
			};
		}//end group TEMPL_KEEPALIVE
		
		group	TEMPL_CM
		{
			template		BGP_CM		CM_MTCtoPTC1 :=
			{
				DATA := '0001'O
			};	
			
			template		BGP_CM		CM_PTC1toMTC :=
			{
				DATA := '0100'O
			};
			template		BGP_CM		CM_MTCtoPTC2 :=
			{
				DATA := '0002'O
			};	
			
			template		BGP_CM		CM_PTC2toMTC :=
			{
				DATA := '0200'O
			};
			template		BGP_CM		CM_PTC1toPTC2 :=
			{
				DATA := '0102'O
			};	
			
			template		BGP_CM		CM_PTC2toPTC1 :=
			{
				DATA := '0201'O
			};
		}//end group TEMPL_CM
		
		group	TEMPL_UPDATE
		{
			template	BGP_UPDATE_CAST		UPDATE_CAST :=
			{
				MARKER						:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH						:= ?,
				TYPE							:= '02'O,
				UNFEASIBLE				:= '0000'O,
				PATHATTRIBUTE_LEN	:= ?,
				ORIGIN						:= '400101'O,
				ORIGIN_TYPE				:= '00'O,
				AS_PATH						:= '4002'O,
				AS_LEN						:= '04'O,
				AS_SEG_TYPE				:= '02'O,
				AS_SEG_LEN				:= '01'O,
				AS_SEG_VAL				:= '0001'O,
				NEXT_HOP					:= '400304'O,
				NEXT_HOT_VAL			:= ROUTER_PCO1_IPv4,
				MED								:= '800404'O,
				MED_VAL						:= ?,
				NLRI							:= ?
			};
			
			template	BGP_UPDATE_ORIGIN_AS_N		UPDATE_ORIGIN0_AS_N :=
			{
					MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
					LENGTH							:= '002F'O,
					TYPE								:= '02'O,
					UNFEASIBLE					:= '0000'O,
					PATHATTRIBUTE_LEN		:= '0014'O,
					ORIGIN							:= '400101'O,
					ORIGIN_TYPE					:= '00'O,
					AS_PATH							:= '4002'O,
					AS_LEN							:= '06'O,
					AS_SEG_TYPE					:= '02'O,
					AS_SEG_LEN					:= '02'O,
					AS_SEG_VAL					:= AS_Number_ROUTER_MTC,
					NEXT_HOP						:= '400304'O,
					NEXT_HOT_VAL				:= ROUTER_PCO3_IPv4,
					NLRI								:= '18C0A801'O	//24/192.168.1
			};			
			
			template	BGP_UPDATE_3AS_PATH	UPDATE_3AS_PATH :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0031'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0016'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '08'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '03'O,
				AS_SEG_VAL					:= '0001005A0002'O,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= ROUTER_PCO1_IPv4,
				NLRI								:= '11A66F80'O
			};
			
			template	BGP_UPDATE_NLRI	UPDATE_NLRI_2 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0031'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number_MTC,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MTC_IPv4,
				NLRI								:= '14A66F80'O,
				NLRI2								:= '18A66FA3'O
			};
			
			template	BGP_UPDATE_WITHDRAW	UPDATE_WITHDRAW_1 :=
			{
				MARKER			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH			:= '001B'O,
				TYPE			:= '02'O,
				UNFEASIBLE		:= '0004'O,
				WITHDRAWN		:= '14A66F80'O,
				PATHATTRIBUTE_LEN	:= '0000'O	
			};
			
			template	BGP_UPDATE_ERR		UPDATE_R_ASPATH11 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number_MTC,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MTC_IPv4,
				NLRI								:= '18C0A801'O
			};
			
			template	BGP_UPDATE_ORIGIN_AS_N		UPDATE_R_ASPATH12 :=
			{
					MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
					LENGTH							:= '002F'O,
					TYPE								:= '02'O,
					UNFEASIBLE					:= '0000'O,
					PATHATTRIBUTE_LEN		:= '0014'O,
					ORIGIN							:= '400101'O,
					ORIGIN_TYPE					:= '00'O,
					AS_PATH							:= '4002'O,
					AS_LEN							:= '06'O,
					AS_SEG_TYPE					:= '02'O,
					AS_SEG_LEN					:= '02'O,
					AS_SEG_VAL					:= '00500002'O,
					NEXT_HOP						:= '400304'O,
					NEXT_HOT_VAL				:= PTC1_IPv4,
					NLRI								:= '18C0A801'O	//24/192.168.1
			};
			
			template	BGP_UPDATE_ERR		UPDATE_R_ASPATH22 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number_PTC1,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= PTC1_IPv4,
				NLRI								:= '18C0A801'O
			};
			
			template	BGP_UPDATE_ORIGIN_AS_N		UPDATE_R_ASPATH21 :=
			{
					MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
					LENGTH							:= '002F'O,
					TYPE								:= '02'O,
					UNFEASIBLE					:= '0000'O,
					PATHATTRIBUTE_LEN		:= '0014'O,
					ORIGIN							:= '400101'O,
					ORIGIN_TYPE					:= '00'O,
					AS_PATH							:= '4002'O,
					AS_LEN							:= '06'O,
					AS_SEG_TYPE					:= '02'O,
					AS_SEG_LEN					:= '02'O,
					AS_SEG_VAL					:=  '00460002'O,
					NEXT_HOP						:= '400304'O,
					NEXT_HOT_VAL				:= MTC_IPv4,
					NLRI								:= '18C0A801'O	//24/192.168.1
			};
			
			template	BGP_UPDATE_3AS_PATH	UPDATE_ORIGIN0_AS_PATH_2 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0031'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0016'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '08'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '03'O,
				AS_SEG_VAL					:= AS_Number_ROUTER_MTC_02,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= ROUTER_PCO3_IPv4,
				NLRI								:=  '18C0A801'O	//24/192.168.1
			};
			
			template	BGP_UPDATE_3AS_PATH	UPDATE_ORIGIN0_AS_PATH_3 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '0031'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0016'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '08'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '03'O,
				AS_SEG_VAL					:= AS_Number_ROUTER_PTC1_02,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= ROUTER_PCO3_IPv4,
				NLRI								:=  '18C0A801'O	//24/192.168.1
			};
			
			template	BGP_UPDATE_ORIGIN_AS_N		UPDATE_ORIGIN0_AS_N_2 :=
			{
					MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
					LENGTH							:= '002F'O,
					TYPE								:= '02'O,
					UNFEASIBLE					:= '0000'O,
					PATHATTRIBUTE_LEN		:= '0014'O,
					ORIGIN							:= '400101'O,
					ORIGIN_TYPE					:= '00'O,
					AS_PATH							:= '4002'O,
					AS_LEN							:= '06'O,
					AS_SEG_TYPE					:= '02'O,
					AS_SEG_LEN					:= '02'O,
					AS_SEG_VAL					:= AS_Number_ROUTER_PTC1,
					NEXT_HOP						:= '400304'O,
					NEXT_HOT_VAL				:= ROUTER_PCO3_IPv4,
					NLRI								:= '18C0A801'O	//24/192.168.1
			};		
			
			template	BGP_UPDATE_ERR		UPDATE_R_BGP_ID1 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number_MTC,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= MTC_IPv4,
				NLRI								:= '18C0A801'O
			};
			
			template	BGP_UPDATE_ERR		UPDATE_R_BGP_ID2 :=
			{
				MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH							:= '002D'O,
				TYPE								:= '02'O,
				UNFEASIBLE					:= '0000'O,
				PATHATTRIBUTE_LEN		:= '0012'O,
				ORIGIN							:= '400101'O,
				ORIGIN_TYPE					:= '00'O,
				AS_PATH							:= '4002'O,
				AS_LEN							:= '04'O,
				AS_SEG_TYPE					:= '02'O,
				AS_SEG_LEN					:= '01'O,
				AS_SEG_VAL					:= AS_Number_PTC1,
				NEXT_HOP						:= '400304'O,
				NEXT_HOT_VAL				:= PTC1_IPv4,
				NLRI								:= '18C0A801'O
			};
			
			template	BGP_UPDATE_ORIGIN_AS_N		UPDATE_BGP_ID_REC :=
			{
					MARKER							:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
					LENGTH							:= '002F'O,
					TYPE								:= '02'O,
					UNFEASIBLE					:= '0000'O,
					PATHATTRIBUTE_LEN		:= '0014'O,
					ORIGIN							:= '400101'O,
					ORIGIN_TYPE					:= '00'O,
					AS_PATH							:= '4002'O,
					AS_LEN							:= '06'O,
					AS_SEG_TYPE					:= '02'O,
					AS_SEG_LEN					:= '02'O,
					AS_SEG_VAL					:= ?,
					NEXT_HOP						:= '400304'O,
					NEXT_HOT_VAL				:= ROUTER_PCO3_IPv4,
					NLRI								:= '18C0A801'O	//24/192.168.1
			};
			
		}//end group TEMPL_UPADATE
		
		
		group	Port
		{
			type port	BGP_Port		message
			{
				inout	all;
			}
			
		}//end group Port
		
		group	TestAbstractComponent
		{
			type component	BGP_Component
			{
				port		BGP_Port		BGP_port_map;
				port		BGP_Port		BGP_port_connect_ptc1;
				port		BGP_Port		BGP_port_connect_ptc2;
				
				timer	BGP_Timer_Hold 		:= 190;
				timer	BGP_Timer_KeepAlive 	:= 60; //unit-s
				timer	WAIT_TIMER := 10;
				timer	BGP_ConnectTimer	 := 25;  //2005.10.20    20
			
			}
			
			type component	BGP_PTC_Component
			{
				port		BGP_Port		BGP_PTC_port_map;
				port		BGP_Port		BGP_PTC_port_connect_mtc;
				port		BGP_Port		BGP_PTC_port_connect_ptc;
				timer	BGP_PTC_Timer_Hold 		:= 190;
				timer	BGP_PTC_Timer_KeepAlive 	:= 60; //unit-s
				timer	BGP_PTC_Timer_Keepalive_Nego	 := 25;
				timer	BGP_PTC_ConnectTimer	 := 25;  //2005.10.20    20
				
				timer	WAIT_TIMER := 10;
			}
		}	//end group TestAbstractComponent
		
		group	TestSystemInterface
		{
			type component BGP_Interface
			{
				port 	BGP_Port		BGP_Interface_Port; 
				port		BGP_Port		BGP_Interface_Port2;				
				port		BGP_Port		BGP_Interface_Port3;
			}
		}//end group TestSystemInterface
		
		group	MyFunctions
		{
			function	fun_ESTABLISHED_PCO1() runs on BGP_Component
			{
				BGP_port_map.send(OPEN_SEND);
				BGP_Timer_Hold.start;
				alt	//01
				{//wait for receive open frame
					[]BGP_port_map.receive(OPEN_RECEIVE)
					{					
						BGP_Timer_Hold.start;
						alt	//02
						{//wait for receive keepalive frame
							[]BGP_port_map.receive(KEEPALIVE_RECEIVE)
							{
								BGP_port_map.send(KEEPALIVE_SEND);
							}
							[]BGP_Timer_Hold.timeout	
							{
								setverdict(fail);
								stop;
							}
						}//end alt 02
					}//end alt 01
					[]BGP_Timer_Hold.timeout
					{
						setverdict(fail);
						stop;
					}						
				}
			}// end function	fun_ESTABLISHED_PCO1()
			
			function	fun_ESTABLISHED_PCO2_ptc1() runs on BGP_PTC_Component
			{
				BGP_PTC_port_map.send(OPEN_SEND_PTC1);
				BGP_PTC_Timer_Hold.start;
				alt	//01
				{//wait for receive open frame
					[]BGP_PTC_port_map.receive(OPEN_RECEIVE)
					{					
						BGP_PTC_Timer_Hold.start;
						alt	//02
						{//wait for receive keepalive frame
							[]BGP_PTC_port_map.receive(KEEPALIVE_RECEIVE)
							{
								BGP_PTC_port_map.send(KEEPALIVE_SEND);
							}
							[]BGP_PTC_Timer_Hold.timeout	
							{
								setverdict(fail);
								stop;
							}
						}//end alt 02
					}//end alt 01
					[]BGP_PTC_Timer_Hold.timeout
					{
						setverdict(fail);
						stop;
					}
				}
			}// end function	fun_ESTABLISHED_PCO2_ptc1()
			
			function	fun_ESTABLISHED_PCO2_ptc2() runs on BGP_PTC_Component
			{
				BGP_PTC_port_map.send(OPEN_SEND_PTC2);
				BGP_PTC_Timer_Hold.start;
				alt	//01
				{//wait for receive open frame
					[]BGP_PTC_port_map.receive(OPEN_RECEIVE)
					{					
						BGP_PTC_Timer_Hold.start;
						alt	//02
						{//wait for receive keepalive frame
							[]BGP_PTC_port_map.receive(KEEPALIVE_RECEIVE)
							{
								BGP_PTC_port_map.send(KEEPALIVE_SEND);
							}
							[]BGP_PTC_Timer_Hold.timeout	
							{
								setverdict(fail);
								stop;
							}
						}//end alt 02
					}//end alt 01
					[]BGP_PTC_Timer_Hold.timeout
					{
						setverdict(fail);
						stop;
					}
				}
			}// end function	fun_ESTABLISHED_PCO2_ptc2()
						
			function	fun_ptc1_UPDATE_AS_PATH_3() runs on BGP_PTC_Component
			{							
				
				fun_ESTABLISHED_PCO2_ptc1();
				BGP_PTC_ConnectTimer.start;
				alt	//01
				{
					[]BGP_PTC_port_connect_ptc.receive(CM_PTC2toPTC1)
					{
						BGP_PTC_port_map.send(UPDATE_R_ASPATH12);						
						BGP_PTC_ConnectTimer.stop;
						stop;
					}
					[]BGP_PTC_ConnectTimer.timeout
					{
						setverdict(fail);
						stop;
					}
				}//end alt 01
			}// end function fun_ptc1_UPDATE_AS_PATH_3()
			
			function	fun_ptc2_UPDATE_AS_PATH_3() runs on BGP_PTC_Component
			{
				var 	integer	HoldTimerValue := 190;
				var	integer	KeepTimerValue := 60;
				var 	integer	WaitTimerValue := 30;
				
				fun_ESTABLISHED_PCO2_ptc2();
				BGP_PTC_port_connect_mtc.send(CM_PTC2toMTC);
				
				HoldTimerValue := HOLD_TIMER;
				BGP_PTC_Timer_Hold.start(HoldTimerValue);
				label	L1;
				alt	//01
				{
					[]BGP_PTC_port_map.receive(UPDATE_ORIGIN0_AS_N)
					{
						BGP_PTC_port_connect_ptc.send(CM_PTC2toPTC1);
						WAIT_TIMER.start(30);
						alt		//02
						{
							[]WAIT_TIMER.timeout
							{
								BGP_PTC_port_connect_mtc.send(CM_PTC2toMTC);
								BGP_PTC_Timer_Hold.start(HoldTimerValue);
								label	L2;
								alt		//03
								{
									[]BGP_PTC_port_map.receive(UPDATE_ORIGIN0_AS_PATH_3)
									{
										setverdict(pass);
										stop;
									}
									[]BGP_PTC_port_map.receive(KEEPALIVE_RECEIVE)
									{
										BGP_PTC_port_map.send(KEEPALIVE_SEND);
										HoldTimerValue := HoldTimerValue - KeepTimerValue;
										BGP_PTC_Timer_Hold.start(HoldTimerValue);
										goto	L2;
									}
									[]BGP_PTC_port_map.receive(UPDATE_CAST)
									{
										BGP_PTC_Timer_Hold.start(HoldTimerValue);
										goto	L2;
									}					
									[]BGP_PTC_Timer_Hold.timeout
									{
										setverdict(fail);
										stop;
									}
								}//end alt 03
							}
						}//end alt 02						
					}
					[]BGP_PTC_port_map.receive(KEEPALIVE_RECEIVE)
					{
						BGP_PTC_port_map.send(KEEPALIVE_SEND);
						HoldTimerValue := HoldTimerValue - KeepTimerValue;
						BGP_PTC_Timer_Hold.start(HoldTimerValue);
						goto	L1;
					}
					[]BGP_PTC_port_map.receive(UPDATE_CAST)
					{
						BGP_PTC_Timer_Hold.start(HoldTimerValue);
						goto	L1;
					}					
					[]BGP_PTC_Timer_Hold.timeout
					{
						setverdict(fail);
						stop;
					}
				}//end alt 01
			}// end function fun_ptc2_UPDATE_AS_PATH_3()
															
		}//end group Functions
		
		group	Testcases
		{			
			testcase		R_UPDATE_AS_PATH_3()	runs on BGP_Component	system BGP_Interface	
			{
				var 	integer	HoldTimerValue := 190;
				var	integer	KeepTimerValue := 60;
				var 	integer	WaitTimerValue := 10;
												
				var	BGP_PTC_Component	v_ptc1 := BGP_PTC_Component.create;
				var	BGP_PTC_Component	v_ptc2 := BGP_PTC_Component.create;
							
				connect(self:BGP_port_connect_ptc1, v_ptc1:BGP_PTC_port_connect_mtc);
				connect(self:BGP_port_connect_ptc2, v_ptc2:BGP_PTC_port_connect_mtc);
				connect(v_ptc1:BGP_PTC_port_connect_ptc, v_ptc2:BGP_PTC_port_connect_ptc);
				
				map(mtc:BGP_port_map, system:BGP_Interface_Port);				
				map(v_ptc1:BGP_PTC_port_map, system:BGP_Interface_Port2);
				map(v_ptc2:BGP_PTC_port_map, system:BGP_Interface_Port3);
											
				v_ptc1.start(fun_ptc1_UPDATE_AS_PATH_3());
				v_ptc2.start(fun_ptc2_UPDATE_AS_PATH_3());
				
				fun_ESTABLISHED_PCO1();
				
				BGP_ConnectTimer.start;
				alt	//01
				{
					[]BGP_port_connect_ptc2.receive(CM_PTC2toMTC)
					{
						BGP_port_map.send(UPDATE_R_ASPATH11);
						BGP_ConnectTimer.stop;
						
						BGP_ConnectTimer.start(100);
						alt		//02
						{
							[]BGP_port_connect_ptc2.receive(CM_PTC2toMTC)
							{
								BGP_port_map.send(CEASE);
								BGP_ConnectTimer.stop;
								alt
								{
									[]v_ptc2.done
									{
										v_ptc1.stop;
										stop;
									}
								}
							}
							[]BGP_ConnectTimer.timeout
							{
								setverdict(fail);
								v_ptc1.stop;
								v_ptc2.stop;
								stop;
							}
						}//end alt 02						
					}
					[]BGP_ConnectTimer.timeout	
					{
						setverdict(fail);
						v_ptc1.stop;
						v_ptc2.stop;
						stop;
					}				
				}//end alt 01
			}//end testcase		R_UPDATE_AS_PATH_3()
						
		}//end group Testcases	
}//end module ROUTING_SELECTION
