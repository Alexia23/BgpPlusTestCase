module OPEN_ERROR
{
		group BGP_CONSTANT
		{
			const Oct2 AS_Number	:= '0046'O;		//70
			const Oct4 MY_IPv4	:= 'C0A801C3'O;		//192.168.1.195
			const Oct2 AS_Number_I	:= '0001'O;
			const Oct4 ROUTER_IPv4	:= 'C0A801A5'O;		//192.168.1.165
			const Oct4 AUX_IP	:= 'B2010102'O;		//178.1.1.2
			const integer HOLD_TIMER 	:= 190;
			const Oct2 TimeToWait 	:= '0000'O; 
			const Oct2 ROUTER_AS 	:= '0001'O;		//1
		}//end group BGP_CONSTANT
		
		// Common string subtypes  number indicates encoding length in number of 
		// _hex digits/chars/octets_
		type octetstring	Oct1 		length(1);
		type octetstring	Oct2 		length(2); 
		type octetstring	Oct3 		length(3); 
		type octetstring	Oct4 		length(4); 
		type octetstring	Oct6 		length(6); 
		type octetstring	Oct16 		length(16); 
		type octetstring	Oct128 		length(128); 
		//type octetstring	Oct1to128 	length(1..128); //with {encode "1 to 128 Octets"};
			
		group	PDU_TYPE
		{
			group	PDU_OPEN
			{
				type record BGP_OPEN
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	VERSION,
					Oct2	MY_AS,
					Oct2	HOLDTIME,
					Oct4	ID,
					Oct1	OPTION_LEN			
				}//	end record BGP_OPEN
				
				type	record BGP_OPEN_OPT
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	VERSION,
					Oct2	MY_AS,
					Oct2	HOLDTIME,
					Oct4	ID,
					Oct1	OPTION_LEN,
					Oct1	PARM_TYPE,
					Oct1	PARM_LEN
				}// end record BGP_OPEN_OPT	
				
				type	record	BGP_OPEN_AUTH
				{
					Oct16 MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	VERSION,
					Oct2	MY_AS,
					Oct2	HOLDTIME,
					Oct4	ID,
					Oct1	OPTION_LEN,
					Oct1	PARM_TYPE,
					Oct1	PARM_LEN,
					Oct1	AUTH_CODE,
					Oct1	AUTH_DATA
				}// end record BGP_OPEN_AUTH
			}//end group PDU_OPEN
						
			group	PDU_NOTIFICATION
			{
				type	record	BGP_NOTIFICATION
				{
					Oct16	MARKER,
					Oct2	LENGTH,
					Oct1	TYPE,
					Oct1	ERR_CODE,
					Oct1	ERR_SUBCODE
				}// end record BGP_NOTIFICATION				
			}// end group	PDU_NOTIFICATION
									
		}//end group PDU_TYPE
		
		group	TEMPL_OPEN
		{
			template	BGP_OPEN	OPEN_RECEIVE :=
			{
				MARKER 			:= ?,
				LENGTH 			:= ?,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= ?,
				HOLDTIME		:= ?,
				ID					:= ?,
				OPTION_LEN	:= ?
			};
			
			template	BGP_OPEN	OPEN_VERSION_ERROR :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '0015'O,
				TYPE				:= '01'O,
				VERSION			:= '07'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '00B4'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_AS_ERROR :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= '0001'O,
				HOLDTIME		:= '00B4'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_HOLD_ERROR_1 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '0001'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_HOLD_ERROR_2 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '0002'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_ID_ERROR_0 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '00B4'O,
				ID					:= '00000000'O,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN	OPEN_ID_ERROR_1 :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001D'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '00B4'O,
				ID					:= 'E0000007'O,
				OPTION_LEN	:= '00'O
			};
			
			template	BGP_OPEN_OPT	OPEN_OPT_PARM :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '001F'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '00B4'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '02'O,
				PARM_TYPE		:= '0B'O,
				PARM_LEN		:= '00'O
			};
			
			template	BGP_OPEN_AUTH		OPEN_AUTHEN :=
			{
				MARKER 			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH 			:= '0021'O,
				TYPE				:= '01'O,
				VERSION			:= '04'O,
				MY_AS				:= AS_Number,
				HOLDTIME		:= '00B4'O,
				ID					:= MY_IPv4,
				OPTION_LEN	:= '04'O,
				PARM_TYPE		:= '01'O,
				PARM_LEN		:= '02'O,
				AUTH_CODE		:= '00'O,
				AUTH_DATA		:= '00'O
			};
		}//end group TEMPL_OPEN
		
		group	TEMPL_NOTIFICATION
		{
			template	BGP_NOTIFICATION		NOTIFICATION_RECEIVE :=
			{
				MARKER			:= ?,
				LENGTH			:= ?,
				TYPE			:= '03'O,
				ERR_CODE		:= ?,
				ERR_SUBCODE	:= ?
			};
			
			template	BGP_NOTIFICATION	CEASE :=
			{
				MARKER			:= 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'O,
				LENGTH			:= '0015'O,
				TYPE			:= '03'O,
				ERR_CODE		:= '06'O,
				ERR_SUBCODE	:= '00'O
			};
			
		}//end group TEMPL_NOTIFICATION
		
		
		group	Port
		{
			type port	BGP_Port	message
			{
				inout	all;
			}		
		}//end group Port
		
		group	TestAbstractComponent
		{
			type component	BGP_Component
			{
				port		BGP_Port		BGPP;
				timer	BGP_Timer_Hold := 190;
				timer	BGP_Timer_KeepAlive := 60; //unit-s
				timer	Timer_Keepalive_Nego := 25;
			
			}
		}	//end group TestAbstractComponent
		
		group	TestSystemInterface
		{
			type component BGP_Interface
			{
				port 	BGP_Port		BGP_Interface_Port; 
			}
		}//end group TestSystemInterface
		
		/*Connect Function*/
		testcase	BGP_OPEN_VERSION()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_VERSION_ERROR);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='01'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_VERSION()
		
		testcase	BGP_OPEN_AS_0()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_AS_ERROR);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='02'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_AS_0()
		
		testcase	BGP_OPEN_AS_1()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					OPEN_AS_ERROR.MY_AS := '0014'O;
					BGPP.send(OPEN_AS_ERROR);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='02'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_AS_1()
		
		testcase	BGP_OPEN_HOLD_1()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_HOLD_ERROR_1);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='06'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_HOLD_1()
		
		testcase	BGP_OPEN_HOLD_2()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_HOLD_ERROR_2);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='06'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_HOLD_2()
		
		testcase	BGP_OPEN_ID_0()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_ID_ERROR_0);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='03'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_ID_0()
		
		testcase	BGP_OPEN_ID_1()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_ID_ERROR_1);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='03'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_ID_1()
		
		testcase	BGP_OPEN_PARM_TYPE()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_OPT_PARM);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='04'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_PARM_TYPE()
		
		testcase	BGP_OPEN_WITH_AUTH()	runs on BGP_Component system BGP_Interface
		{
			var		Oct1	ErrorCode := '00'O;
			var		Oct1	ErrorSubCode :='00'O;
			
			var BGP_NOTIFICATION		vNotificationData;
			
			map(mtc:BGPP, system:BGP_Interface_Port);
			
			BGP_Timer_Hold.start;
			alt	//01
			{//wait for receive open frame
				[]BGPP.receive(OPEN_RECEIVE)
				{
					BGPP.send(OPEN_AUTHEN);
					BGP_Timer_Hold.start;
					alt	//02
					{//wait for receive notification frame
						[]BGPP.receive(NOTIFICATION_RECEIVE)-> value vNotificationData
						{
							ErrorCode := vNotificationData.ERR_CODE;
							ErrorSubCode := vNotificationData.ERR_SUBCODE;
							if(ErrorCode=='02'O and ErrorSubCode=='05'O)
							{
								setverdict(pass);
								stop;
							}
							else
							{
								setverdict(fail);
								stop;
							}
						}
						[]BGP_Timer_Hold.timeout	
						{
							setverdict(fail);
							stop;
						}	
						[]BGPP.receive	
						{					
							setverdict(fail);
							stop;
						}
					}//end alt 02
				}
				[]BGP_Timer_Hold.timeout	
				{
					setverdict(fail);
					stop;
				}	
				[]BGPP.receive	
				{					
					setverdict(fail);
					stop;
				}
			}// end alt 01
		}// end testcase BGP_OPEN_WITH_AUTH()
		
}//end module OPEN_ERROR
